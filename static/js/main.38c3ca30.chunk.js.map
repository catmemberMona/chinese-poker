{"version":3,"sources":["Components/BoardComponents/GameInfo.js","Components/CustomizeCard.js","Components/BoardComponents/Table.js","store/reducers/gameReducer.js","store/reducers/playerReducer.js","store/reducers/computerReducer.js","store/reducers/tableReducer.js","store/reducers/index.js","Data/images.js","Data/card.js","Components/BoardComponents/RoundInfo.js","Components/Board.js","Computer.js","Components/PlayerComponents/Place.js","Components/PlayerComponents/Turn.js","Components/PlayerComponents/Hand.js","Components/Player.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["styles","gameInfo","flex","justifyContent","heading","fontSize","fontWeight","color","margin","alignSelf","background","borderBottomRightRadius","padding","GameInfo","style","cardContent","flexDirection","border","backgroundColor","name","alignItems","nameTop","nameBottom","element","CustomizeCard","props","cardSize","card","Card","isSelected","raised","type","Cards","cards","useSelector","state","table","map","cardInner","id","flexWrap","height","width","minWidth","minHeight","Table","SET_FIRST_GAME_TO_FALSE","TOGGLE_IN_GAME","ASSIGN_AS_PLAYERS_TURN","ASSIGN_AS_COMPUTERS_TURN","toggleInGameState","setToComputersTurn","initialState","isFirstGame","isInPlay","isPlayersTurn","reducer","action","ADD_SELECTED_CARD","REMOVE_SELECTED_CARD","GET_INITIAL_HAND","REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM","UPDATE_MESSAGE","removedPlaceDownCards","updateMessage","text","hand","cardsLeft","cardsSelected","message","stack","length","indexOf","selected","filter","newHand","includes","GET_INITIAL_HAND_FOR_COMPUTER","REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM_FOR_COMPUTER","GET_PLACED_DOWN_CARDS","REMOVE_ALL_CARDS","clearTable","groupType","sumPriority","highestCardId","totalCards","cardsStat","RESET","appReducer","combineReducers","game","player","computer","rootReducer","undefined","elementalImages","air","water","earth","fire","nameImages","3","image","priority","4","5","6","7","8","9","10","J","Q","K","A","2","CardData","this","nameImage","typePriority","typeImage","createDeck","deckData","Object","entries","typeKey","typeValue","newCardData","nameKey","nameValue","push","PlayersInfo","cardsRemainingCountForPlayer","cardsRemainingCountForComputer","playersInfo","playerName","roundInfo","paddingTop","paddingRight","marginLeft","maxHeight","borderBottomLeftRadius","controls","marginTop","buttons","borderRadius","reshuffle","RoundInfo","isFirstRound","dispatch","useDispatch","startRound","deck","randomIndices","i","randomInt","Math","floor","random","sort","a","b","computerStack","playerStack","indexPointer","shuffleAndSeperateCards","giveComputerStack","visibility","onClick","board","alignContent","Board","pickASingle","tableId","playWithNoConditions","playWithConditions","tableHighestCardId","cardNames","count","cardsNamesWithMoreThanOne","cardName","double","pickDoubles","computerPlays","setTimeout","console","log","checkAndDetermindGroupType","highestCard","placeCards","removedPlaceDownCardsFromComputer","caluclateSumOfPriorities","sum","isStraight","isFlush","isFourOrFull","typeCount","numberOfEachCardName","values","isFourOfAKindOrFullHouse","groupStats","Place","playerRemainingCardCount","selectedCardsCount","computerHand","cardsOnTableCount","highestCardIdOnTable","onTableGroupType","display","pairs","getHighestPriorityCardThatMattersForFullHouseAndFourKinds","groupTypeRanking","flush","straight","Message","Choice","choice","turn","paddingLeft","Turn","selectCard","removeCardSelected","addSelectedCard","item","marginBottom","overflow","marginRight","Hand","Player","app","App","useState","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38c3ca30.chunk.js","sourcesContent":["import React from 'react';\n\nconst GameInfo = () => {\n  return (\n    <div style={styles.gameInfo}>\n      <h1 style={styles.heading}>Elemental Poker</h1>\n    </div>\n  )\n};\n\nlet styles = {\n  gameInfo: {\n    flex: 0.8,\n    justifyContent: 'center',\n  },\n  heading: {\n    fontSize: '1.2em',\n    fontWeight: 700,\n    color: 'tan',\n    margin: '.5em',\n    alignSelf: 'start',\n    background: 'rgba(38, 63, 38, 0.7)',\n    borderBottomRightRadius: 10,\n    padding: 10, \n  },\n};\nexport default GameInfo;\n","import React from 'react'\nimport { Card } from '@material-ui/core';\n\nconst CustomizeCard = (props) => {\n  let { cardSize, card } = props\n\n  return (\n    <Card\n      style={{ ...cardSize, backgroundColor: card.isSelected ? 'orange' : 'white', }}\n      raised={true}\n    >\n      <div style={styles.cardContent}>\n            <div style={styles.name && styles.nameTop}>{card.name}</div>\n            <div style={styles.element}>{card.type}</div>\n            <div style={(styles.name, styles.nameBottom)}>{card.name}</div>\n          </div>\n        </Card>\n  );\n};\n\nlet styles = {\n  cardContent: {\n    flex: 1,\n    flexDirection: 'column',\n    border: '1px black solid',\n    margin: 3,\n    padding: 3,\n    backgroundColor: 'white',\n  },\n  name: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  nameTop: {\n    justifyContent: 'flex-start',\n  },\n  nameBottom: { justifyContent: 'flex-end' },\n  element: {\n    flex: 5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n};\n\nexport default CustomizeCard","import React from 'react';\nimport CustomizeCard from '../CustomizeCard'\nimport { useSelector } from 'react-redux';\n\nconst Cards = () => {\n  let cards = useSelector(state => state.table.cards)\n  \n  return (\n    <div style={styles.cards}>\n      {\n        cards.map(card => {\n          return (\n            <CustomizeCard key={card.id}\n              cardSize={styles.card}\n              cardInner={styles.cardInner}\n              card={card}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nconst Table = () => {\n  return <div style={styles.table}>\n    <Cards />\n  </div>;\n};\n\nlet styles = {\n  table: {\n    flex: 1,\n  },\n  cards: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\"\n  },\n  card: {\n    height: \"20vw\",\n    width: \"12vw\",\n    minWidth: 90,\n    minHeight: 140,\n    margin: 1\n  },\n  cardInner: {\n    flex: 1,\n    margin: 5\n  }\n};\nexport default Table;\n","// Constants\nconst SET_FIRST_GAME_TO_FALSE = 'SET_FIRST_GAME_TO_FALSE';\nconst TOGGLE_IN_GAME = 'TOGGLE_IN_GAME';\nconst ASSIGN_AS_PLAYERS_TURN = 'ASSIGN_AS_PLAYERS_TURN';\nconst ASSIGN_AS_COMPUTERS_TURN = 'ASSIGN_AS_COMPUTERS_TURN';\n\n// Create actions\nexport const setFirstGameStateToFalse = () => ({ type: SET_FIRST_GAME_TO_FALSE} )\nexport const toggleInGameState = () => ({ type: TOGGLE_IN_GAME })\nexport const setToPlayersTurn = () => ({ type: ASSIGN_AS_PLAYERS_TURN })\nexport const setToComputersTurn = () => ({type: ASSIGN_AS_COMPUTERS_TURN})\n\n\nvar initialState = {\n  isFirstGame: true,\n  isInPlay: false,\n  isPlayersTurn: false,\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_FIRST_GAME_TO_FALSE:\n      return { ...state, isFirstGame: false };\n    case TOGGLE_IN_GAME:\n      return { ...state, isInPlay: !state.isInPlay }\n    case ASSIGN_AS_PLAYERS_TURN:\n      return { ...state, isPlayersTurn: true }\n    case ASSIGN_AS_COMPUTERS_TURN:\n      return {...state, isPlayersTurn: false}\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","// Constants\nconst ADD_SELECTED_CARD = 'ADD_SELECTED_CARD';\nconst REMOVE_SELECTED_CARD = 'REMOVE_SELECTED_CARD';\nconst GET_INITIAL_HAND = 'GET_INITIAL_HAND';\nconst REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM =\n  'REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM';\nconst UPDATE_MESSAGE = 'UPDATE_MESSAGE';\n\n// Create actions\nexport const addSelectedCard = (card) => ({\n  type: ADD_SELECTED_CARD,\n  card,\n});\n\nexport const removeCardSelected = (card) => ({\n  type: REMOVE_SELECTED_CARD,\n  card\n});\n\nexport const givePlayerStack = (stack) => ({\n  type: GET_INITIAL_HAND,\n  stack\n})\n\nexport const removedPlaceDownCards = (cards) => ({\n  type: REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM, cards\n})\n\nexport const updateMessage = (text) => ({ type: UPDATE_MESSAGE, text});\n\nvar initialState = {\n  hand: [],\n  cardsLeft: 0,\n  cardsSelected: [],\n  message: \"Press Start Game\"\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INITIAL_HAND:\n      return { ...state, hand: [...action.stack], cardsLeft: action.stack.length };\n    case ADD_SELECTED_CARD:\n      return { ...state, cardsSelected: [...state.cardsSelected, action.card] };\n    case REMOVE_SELECTED_CARD:\n      const index = state.cardsSelected.indexOf(action.card);\n      const selected = state.cardsSelected.filter((card => card.id !== action.card.id) )\n      return { ...state, cardsSelected: [...selected] };\n    case REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM:\n      const newHand = state.hand.filter(card => !action.cards.includes(card))\n      return { ...state, hand: [...newHand], cardsLeft: newHand.length, cardsSelected: [] }\n    case UPDATE_MESSAGE:\n      return {...state, message: action.text}\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","// Constants\nconst GET_INITIAL_HAND_FOR_COMPUTER = 'GET_INITIAL_HAND_FOR_COMPUTER';\nconst REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM_FOR_COMPUTER =\n  'REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM_FOR_COMPUTER';\n\n// Create actions\nexport const giveComputerStack = (stack) => ({\n  type: GET_INITIAL_HAND_FOR_COMPUTER,\n  stack,\n});\n\nexport const removedPlaceDownCardsFromComputer = (cards) => ({\n  type: REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM_FOR_COMPUTER,\n  cards,\n});\n\nvar initialState = {\n  hand: [],\n  cardsLeft: 0,\n  cardsSelected: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INITIAL_HAND_FOR_COMPUTER:\n      return {\n        ...state,\n        hand: [...action.stack],\n        cardsLeft: action.stack.length,\n      };\n    case REMOVE_SELECTED_CARDS_AFTER_PLACING_THEM_FOR_COMPUTER:\n      const newHand = state.hand.filter((card) => !action.cards.includes(card));\n      return {\n        ...state,\n        hand: [...newHand],\n        cardsLeft: newHand.length,\n        cardsSelected: [],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","// Constants\nconst GET_PLACED_DOWN_CARDS = 'GET_PLACED_DOWN_CARDS';\nconst REMOVE_ALL_CARDS = 'REMOVE_ALL_CARDS';\n\n// Create actions\nexport const updateCardsOnTable = (cardsStat) => ({\n  type: GET_PLACED_DOWN_CARDS,\n  cardsStat,\n});\n\nexport const clearTable = () => ({type: REMOVE_ALL_CARDS})\n\n// change to object with hand cards data\nvar initialState = {\n  cards: [],\n  groupType: \"\",\n  sumPriority: 0,\n  highestCardId: 0,\n  totalCards: 0\n}\n\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PLACED_DOWN_CARDS:\n      // console.log(\"Cards placed on table in table reducer:\", action.cardsStat)\n      return { ...action.cardsStat };\n    case REMOVE_ALL_CARDS:\n      return {...initialState}\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import game from './gameReducer';\nimport { combineReducers } from 'redux';\n\nimport table from './tableReducer'\nimport player from './playerReducer'\nimport computer from './computerReducer'\n\nconst RESET = 'RESET'\n\nexport const resetGame = () => ({type: RESET})\n\nconst appReducer = combineReducers({\n  game,\n  table,\n  player,\n  computer\n\n});\n\nconst rootReducer = (state, action) => {\n   if (action.type === RESET) {\n     return appReducer(undefined, action);\n   }\n\n   return appReducer(state, action);\n}\n\nexport default rootReducer;\n","const elementalImages = {\n  air: 'air',\n  water: 'water',\n  earth: 'earth',\n  fire: 'fire',\n};\nconst nameImages = {\n  3: { image: '3', priority: 1 },\n  4: { image: '4', priority: 2 },\n  5: { image: '5', priority: 3 },\n  6: { image: '6', priority: 4 },\n  7: { image: '7', priority: 5 },\n  8: { image: '8', priority: 6 },\n  9: { image: '9', priority: 7 },\n  10: { image: '10', priority: 8 },\n  J: { image: 'J', priority: 9 },\n  Q: { image: 'Q', priority: 10 },\n  K: { image: 'K', priority: 11 },\n  A: { image: 'A', priority: 12 },\n  2: { image: '2', priority: 13 },\n};\n\nexport {elementalImages, nameImages}","import { elementalImages, nameImages } from \"./images\";\n\nfunction CardData() {\n  this.id = 0.0\n  this.name = \"\";\n  this.priority = 0;\n  this.nameImage = \"\";\n  this.type = \"\";\n  this.typePriority = 0.0;\n  this.typeImage = \"\";\n  this.isSelected = false;\n};\n\nconst createDeck = () => {\n  let deckData = [];\n\n  for (const [typeKey, typeValue] of Object.entries(elementalImages)) {\n    let newCardData;\n\n    for (const [nameKey, nameValue] of Object.entries(nameImages)) {\n      newCardData = new CardData();\n\n      // Assign the Name Data\n      newCardData.name = nameKey;\n      newCardData.priority = nameValue.priority;\n      newCardData.nameImage = nameValue.image;\n\n      // Assign the Type Data\n      newCardData.type = typeKey;\n      newCardData.typeImage = typeValue;\n\n      switch (typeKey) {\n        case 'air':\n          newCardData.typePriority = 0.4;\n          break;\n        case 'water':\n          newCardData.typePriority = 0.3;\n          break;\n        case 'earth':\n          newCardData.typePriority = 0.2;\n          break;\n        default:\n          newCardData.typePriority = 0.1;\n      }\n\n      newCardData.id = newCardData.priority + newCardData.typePriority;\n\n      deckData.push(newCardData);\n    }\n  }\n  \n  return deckData\n};\n\n\nexport default createDeck","import React from 'react';\nimport { Card } from '@material-ui/core';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFirstGameStateToFalse, toggleInGameState } from '../../store/reducers/gameReducer';\nimport { givePlayerStack, updateMessage } from '../../store/reducers/playerReducer';\nimport { giveComputerStack } from '../../store/reducers/computerReducer'\nimport { resetGame } from '../../store/reducers';\n\nimport createDeck from '../../Data/card'\n\nconst PlayersInfo = () => {\n  let cardsRemainingCountForPlayer = useSelector(state => state.player.cardsLeft)\n  let cardsRemainingCountForComputer = useSelector(state => state.computer.cardsLeft)\n\n  return (\n    <div style={styles.playersInfo}>\n      <div>\n        <Card style={styles.card} raised={true}>\n          <p>{cardsRemainingCountForComputer}</p>\n        </Card>\n        <p style={styles.playerName}>Amber the Computer</p>\n      </div>\n      <div>\n        <Card style={styles.card} raised={true}>\n          <p>{cardsRemainingCountForPlayer}</p>\n        </Card>\n        <p style={styles.playerName}>You</p>\n      </div>\n    </div>\n  );\n}\n\nconst shuffleAndSeperateCards = (deck) => {\n  let randomIndices = []\n\n  for (let i = 0; i < deck.length / 2; i++){\n    let randomInt = -1\n    do {\n      randomInt = Math.floor(Math.random() * deck.length);\n    } while (randomIndices.includes(randomInt))\n    \n    randomIndices.push(randomInt)\n  }\n\n  randomIndices.sort((a,b) => a - b)\n\n  let computerStack = []\n  let playerStack = []\n  let indexPointer = 0\n\n  for (let i = 0; i < deck.length; i++) {\n    if (randomIndices[indexPointer] === i) {\n      computerStack.push(deck[i])\n      indexPointer+=1\n    } else {\n      playerStack.push(deck[i])\n    }\n  }\n\n  return [computerStack, playerStack]\n}\n\nconst RoundInfo = () => {\n  let game = useSelector((state) => (state.game))\n  let isFirstRound = game.isFirstGame\n  let isInPlay = game.isInPlay\n\n  let dispatch = useDispatch()\n\n  const startRound = () => {\n    if (isFirstRound) dispatch(setFirstGameStateToFalse());\n    dispatch(toggleInGameState());\n\n    const deck = createDeck();\n\n    let [computerStack, playerStack] = shuffleAndSeperateCards(deck)\n    // dispatch to computer and player card stacks \n    dispatch(givePlayerStack(playerStack.sort((a, b) => a.id - b.id)));\n    dispatch(giveComputerStack(computerStack.sort((a, b) => a.id - b.id)));\n\n    // asign first player by who has the smallest 3\n    dispatch(updateMessage(\"The computer started first. Select and place your card(s).\"))\n\n  }\n\n  const reStart = () => {\n    dispatch(resetGame());\n    startRound()\n  };\n\n  return (\n    <div style={styles.roundInfo}>\n      <PlayersInfo />\n      <div style={styles.controls}>\n        <button\n          style={{\n            ...styles.buttons,\n            visibility: `${!isInPlay ? 'visible' : 'hidden'}`,\n          }}\n          onClick={startRound}\n        >\n          {isFirstRound ? 'Start Game' : 'Play Again'}\n        </button>\n        <button\n          style={{\n            ...styles.buttons,\n            visibility: `${isInPlay ? 'visible' : 'hidden'}`,\n          }}\n          onClick={reStart}\n        >\n          Reshuffle\n        </button>\n      </div>\n    </div>\n  );\n};\n\nlet styles = {\n  roundInfo: {\n    flex: 0.9,\n    flexDirection: 'column',\n  },\n  playersInfo: {\n    flex: 1,\n    flexDirection: 'column',\n    paddingTop: '.5em',\n    paddingRight: '.5em',\n  },\n  card: {\n    margin: 5,\n    marginLeft: 8,\n    minWidth: 30,\n    maxHeight: 50,\n    justifyContent: 'center',\n  },\n  playerName: {\n    fontSize: '.8em',\n    fontWeight: 600,\n    color: 'tan',\n    margin: 'auto',\n    padding: 5,\n    minWidth: '6.5em',\n    background: 'rgba(38, 63, 38, 0.7)',\n    borderBottomLeftRadius: 5,\n    borderBottomRightRadius: 5,\n  },\n  controls: {\n    flex: 1.3,\n    marginTop: '1em',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  buttons: {\n    width: 100,\n    height: 50,\n    borderRadius: 8,\n    margin: 5,\n  },\n  reshuffle: {\n    width: 100,\n    height: 50,\n    borderRadius: 8,\n    margin: 5,\n\n  },\n};\n\nexport default RoundInfo;\n","import React from 'react'\nimport { GameInfo, Table, RoundInfo } from './BoardComponents'\n\nconst Board = () => {\n\n  return (\n    <div style={styles.board}>\n      <div style={styles.gameInfo}>\n        <GameInfo />\n      </div>\n      <div style={styles.table}>\n        <Table />\n      </div>\n      <div style={styles.roundInfo}>\n        <RoundInfo />\n      </div>\n\n    </div>\n  )\n}\n\nlet styles = {\n  board: {\n    flex: 16,\n    flexDirection: 'row',\n  },\n  gameInfo: {\n    flex: .8,\n  },\n  table: {\n    flex: 4.4,\n    alignContent: 'center',\n    justifyContent: 'center',\n  },\n  roundInfo: {\n    flex: .8,\n    justifyContent: 'flex-end',\n  },\n};\n\nexport default Board","import {\n  toggleInGameState,\n  setToPlayersTurn,\n} from './store/reducers/gameReducer';\nimport { clearTable } from './store/reducers/tableReducer'\nimport {removedPlaceDownCardsFromComputer} from './store/reducers/computerReducer'\nimport {\n  placeCards,\n  checkAndDetermindGroupType,\n} from './Components/PlayerComponents/Place';\nimport { updateMessage } from './store/reducers/playerReducer';\n\nconst pickASingle = (hand, tableId) => {\n\n  if (!tableId) return [hand[0]]\n\n  for (let i = 0; i < hand.length; i++){\n    if (hand[i].id > tableId) return [hand[i]]\n  }\n\n  return []\n}\n\nconst pickDoubles = (hand, tableHighestCardId) => {\n\n  let cardNames = {};\n\n  for (const card of hand) {\n    if (!cardNames[card.name]) {\n      cardNames[card.name] = {count: 1, cards: [card]}\n    } else {\n      cardNames[card.name].count += 1\n      cardNames[card.name].cards.push(card)\n    }\n  }\n\n  // keys and values\n  let allCardNames = Object.entries(cardNames);\n  // filters to see that there is at least two cards of the same name\n  let cardsNamesWithMoreThanOne = allCardNames.filter(cardName => {\n    return cardName[1].count > 1\n  })\n\n  let double = []\n  for (let cardName of cardsNamesWithMoreThanOne) {\n    const cards = cardName[1].cards;\n    if (cards[cards.length - 1].id > tableHighestCardId) {\n      double = [cards[cards.length - 2], cards[cards.length - 1]]\n    }\n  }\n\n  return double\n\n}\n\nfunction Computer() {\n  \n\n  this.playWithNoConditions = function (hand) {\n    // easy mode - plays single card\n    return pickASingle(hand)\n  };\n\n  this.playWithConditions = function (table, hand) {\n  \n    switch (table.groupType) {\n      case 'single':\n        return pickASingle(hand, table.highestCardId);\n      case 'double':\n        return pickDoubles(hand, table.highestCardId);\n      default:\n        return []\n    }\n  };\n  \n  this.computerPlays = function (table, hand, dispatch) {\n    let cards = []\n\n    if (table.cards.length === 0) {\n      // console.log(\"THE COMPUTER IS PLAYING AFTER PLAYER SKIPS:\", \"Table:\", table, \"HAND:\", hand)\n      cards = this.playWithNoConditions(hand);\n    } else {\n      cards = this.playWithConditions(table, hand)\n    }\n\n    if (cards.length === 0) {\n      // computer can not find any cards that are better than the one on the table\n      setTimeout(function () {\n        dispatch(clearTable());\n        // Message: Computer passed it's turn. You can play any card(s) that are valid.\n      }, 2000);\n\n    } else {\n\n      setTimeout(function () {\n        console.log(\"PREVIOUSLY GOT AN ERROR HERE BECAUSE OF NO PRIORITY FOR THESE CARDS:\", cards)\n        const groupType = checkAndDetermindGroupType(cards);\n        const highestCard = cards[cards.length - 1];\n        // console.log(\"CARDS THAT COMPUTER PICKED:\", cards)\n        placeCards(dispatch, cards, groupType, highestCard);\n        dispatch(removedPlaceDownCardsFromComputer(cards));\n      }, 1000);\n     \n\n    }\n\n    if (hand.length - cards.length === 0) {\n      dispatch(toggleInGameState());\n      // MESSAGE COMPUTER WON\n      dispatch(updateMessage(\"The computer won! Play Again?\"))\n    }\n\n    if (cards.length === 0) {\n      // No card combinations are available \n      dispatch(updateMessage(\"The computer passed it's turn. Place any valid card(s).\"))\n    }\n\n    // It's Player's turn\n    dispatch(setToPlayersTurn());\n    // console.log(\"wAS THIS EVER SET TO PLAYERS TURN?\")\n  }\n};\n\nlet computer = new Computer();\n\n\nexport default computer","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateCardsOnTable } from '../../store/reducers/tableReducer';\nimport { removedPlaceDownCards, updateMessage } from '../../store/reducers/playerReducer'\nimport {\n  toggleInGameState,\n  setToComputersTurn,\n} from '../../store/reducers/gameReducer';\nimport computer from '../../Computer';\n\n\nconst caluclateSumOfPriorities = (cardsSelected) => {\n  let sum = 0;\n\n  for (const card of cardsSelected) {\n    sum += card.priority;\n  }\n  return sum;\n};\n\nconst isStraight = (cardsSelected) => {\n  for (let i = 0; i < cardsSelected.length - 1; i++) {\n    if (cardsSelected[i].priority + 1 !== cardsSelected[i + 1].priority)\n      return false;\n  }\n\n  return true;\n};\n\nconst isFlush = (cardsSelected) => {\n  const type = cardsSelected[0].type;\n  for (const card of cardsSelected) {\n    if (card.type !== type) return false;\n  }\n  return true;\n};\n\nconst getHighestPriorityCardThatMattersForFullHouseAndFourKinds = (\n  cardsSelected\n) => {\n  let cardNames = {};\n  for (const card of cardsSelected) {\n    if (!cardNames[card.name]) {\n      cardNames[card.name] = 1;\n    } else {\n      cardNames[card.name] += 1;\n    }\n  }\n\n  // keys and values\n  let pairs = Object.entries(cardNames);\n  const cardName = pairs[0][1] > pairs[1][1] ? pairs[0][0] : pairs[1][0];\n  // return highest card id\n  const cards = cardsSelected.filter((card) => card.name === cardNames);\n  return cards[cards.length - 1];\n};\n\nconst isFourOfAKindOrFullHouse = (cardsSelected) => {\n  let cardNames = {};\n  let typeCount = 0;\n  for (const card of cardsSelected) {\n    if (!cardNames[card.name]) {\n      cardNames[card.name] = 1;\n      typeCount += 1;\n    } else {\n      cardNames[card.name] += 1;\n    }\n\n    if (typeCount > 2) return false;\n  }\n\n  let numberOfEachCardName = Object.values(cardNames);\n  // check if four of a kind\n  if (numberOfEachCardName[0] === 1 || numberOfEachCardName[0] === 4)\n    return 'four of a kind';\n  // check if full house\n  if (numberOfEachCardName[0] === 2 || numberOfEachCardName[0] === 3)\n    return 'full house';\n};\n\nexport const checkAndDetermindGroupType = (cardsSelected) => {\n  if (cardsSelected.length === 1) return 'single';\n  if (\n    cardsSelected.length === 2 &&\n    cardsSelected[0].priority === cardsSelected[1].priority\n  ) {\n    \n    return 'double';\n  }\n\n  if (cardsSelected.length === 5) {\n    if (isFlush(cardsSelected) && isStraight(cardsSelected))\n      return 'straight flush';\n\n    const isFourOrFull = isFourOfAKindOrFullHouse(cardsSelected);\n    if (isFourOrFull !== false) return isFourOrFull;\n\n    if (isFlush(cardsSelected)) return 'flush';\n    if (isStraight(cardsSelected)) return 'straight';\n  }\n\n  return false;\n};\n\nexport const placeCards = (dispatch, cardsSelected, groupType, highestCard) => {\n  // calculations\n  let groupStats = {\n    cards: cardsSelected,\n    groupType: groupType,\n    sumPriority: caluclateSumOfPriorities(cardsSelected),\n    highestCardId: highestCard.id,\n    totalCards: cardsSelected.length,\n  };\n\n  dispatch(updateCardsOnTable(groupStats));\n \n\n  // deselect cards \n  \n};\n\n\nconst Place = () => {\n  const dispatch = useDispatch();\n  // player's hand\n  const playerRemainingCardCount = useSelector(\n    (state) => state.player.cardsLeft\n  );\n  const cardsSelected = useSelector((state) => state.player.cardsSelected);\n  cardsSelected.sort((a, b) => a.priority - b.priority);\n  const selectedCardsCount = cardsSelected.length;\n\n  // computer\n  const computerHand = useSelector((state) => state.computer.hand);\n\n  const table = useSelector((state) => state.table);\n  const cardsOnTableCount = table.totalCards;\n  const highestCardIdOnTable = table.highestCardId;\n  const onTableGroupType = table.groupType;\n\n  const isPlayersTurn = useSelector((state) => state.game.isPlayersTurn);\n  const isInPlay = useSelector((state) => state.game.isInPlay);\n\n  // Should be called when re-rendered after dispatching new state of isPlayersTurn\n  if (!isPlayersTurn && isInPlay) {\n    console.log(\"THIS IS NOW THE COMPUTERS TURN\")\n    computer.computerPlays(table, computerHand, dispatch);\n  }\n\n  console.log('CARDS ON TABLE:', cardsOnTableCount);\n\n  const checkCards = () => {\n    if (selectedCardsCount === 0) {\n      dispatch(updateMessage('No cards are selected. Select card(s) or pass your turn.')); \n      return;\n    }\n\n    if (\n      selectedCardsCount > 5 ||\n      selectedCardsCount === 4 ||\n      selectedCardsCount === 3\n    ) {\n      // Message: Invalid number of cards were selected\n      dispatch(updateMessage('An invalid number of cards were selected'));\n      return;\n    }\n\n    // returns false if group type is invalid\n    const groupType = checkAndDetermindGroupType(cardsSelected);\n    if (groupType === false) {\n      // Message: Invalid card groupings. Take a look at the possible combinations\n      dispatch(\n        updateMessage(\n          'This is not a possible combination. Possible combinations are: Single, Double, Straight, Flush, Full House, Four Of A Kind, or Straight Flush.'\n        )\n      );\n      return;\n    }\n\n    let highestCard = 0\n    if (\n      groupType === 'full house' || groupType === 'four of a kind') {\n      getHighestPriorityCardThatMattersForFullHouseAndFourKinds(\n        highestCard = cardsSelected\n      )\n    } else {\n      highestCard = cardsSelected[cardsSelected.length - 1];\n    }\n      \n    \n    if (cardsOnTableCount === 0) {\n      placeCards(dispatch, cardsSelected, groupType, highestCard);\n      dispatch(removedPlaceDownCards(cardsSelected));\n      dispatch(setToComputersTurn());\n    \n    }\n\n    if (groupType !== onTableGroupType) {\n      // The single or double that was selected is not of the same type as the table's cards\n      if (groupType === 'single' || groupType === 'double') return;\n      // the table has a single or a double and the player doesn't\n      if (onTableGroupType === 'single' || onTableGroupType === 'double')\n        return;\n    }\n\n    // Groups are not of the same types and cards on table and hand are 5 card groups\n    if (groupType !== onTableGroupType) {\n      let groupTypeRanking = {\n        'straight flushing': 5,\n        'for of a kind': 4,\n        'full house': 3,\n        flush: 2,\n        straight: 1,\n      };\n\n      if (groupTypeRanking[groupType] < groupTypeRanking[onTableGroupType]) {\n        // This grouping of cards is of a lower rank than the one on the table\n        return;\n      } else {\n        // The selected cards are of a higher ranking than the tables\n        placeCards(dispatch, cardsSelected, groupType, highestCard);\n        dispatch(removedPlaceDownCards(cardsSelected));\n      }\n    } else {\n      // group type is equal, place higher rank\n      // check count of 5\n      // if straight, double or single -> check for higher priority\n      // if flush -> check for higher type priority first\n      // if full house -> get the ones with three of a kind and check highest id/priority\n      // if four of a kind -> get the fours and check highest priority\n      // if flushing straight -> check flush and straight\n\n      // check count less than 5\n      // console.log('DOES THIS PASS HEEREERERERERERE:', groupType);\n\n      // These are for single, double, straight, straight flush,\n      // check for higher lvl group\n      if (highestCard.id > highestCardIdOnTable) {\n        placeCards(dispatch, cardsSelected, groupType, highestCard);\n        dispatch(removedPlaceDownCards(cardsSelected));\n      } else {\n        // message: Select cards that have a higher rank than the ones on the table\n        dispatch(updateMessage(\"The card combination you selected is of a lower rank than the one on the table.\"))\n        return;\n      }\n    }\n\n    // The cards are either valid or not vaild\n    if (playerRemainingCardCount === 0) {\n      dispatch(toggleInGameState());\n      // Message: You Won!\n      dispatch(updateMessage(\"You Won! Play Again?\"))\n      return;\n    } else {\n      // Computers Turn\n      dispatch(setToComputersTurn());\n      dispatch(updateMessage(''));\n    }\n  };\n\n  return (\n    <button style={{...styles.buttons, display: `${ isInPlay ? 'block' : 'none'}`,}} onClick={checkCards}>\n      Place\n    </button>\n  );\n}\n\nlet styles = {\n  buttons: {\n    width: 100,\n    height: 35,\n    borderRadius: 8,\n    margin: 3,\n  },\n};\n\nexport default Place","import React from 'react';\nimport Place from './Place'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateCardsOnTable, clearTable } from '../../store/reducers/tableReducer'\nimport {\n  toggleInGameState,\n  setToComputersTurn,\n} from '../../store/reducers/gameReducer';\nimport computer from '../../Computer';\n\n\n\nconst Message = () => {\n  let message = useSelector(state => state.player.message)\n\n  return <div style={styles.message}>\n    <p style={styles.text}>{ message}</p>\n  </div>\n}\n\nconst Choice = () => {\n  const dispatch = useDispatch();\n\n  // computer\n  const computerHand = useSelector((state) => state.computer.hand);\n  const table = useSelector((state) => state.table);\n\n  const isPlayersTurn = useSelector((state) => state.game.isPlayersTurn);\n  const isInPlay = useSelector((state) => state.game.isInPlay);\n  \n  // Should be called when re-rendered after dispatching new state of isPlayersTurn\n  if (!isPlayersTurn && isInPlay) {\n    console.log('THIS IS NOW THE COMPUTERS TURN');\n    computer.computerPlays(table, computerHand, dispatch);\n  }\n\n  const passTurn = () => {\n    // remove cards on table\n    dispatch(clearTable());\n    dispatch(setToComputersTurn());\n  };\n\n  return (\n    <div style={styles.choice}>\n      <Place />\n      <button\n        style={{\n          ...styles.buttons,\n          display: `${isInPlay ? 'block' : 'none'}`,\n        }}\n        onClick={passTurn}\n      >\n        Pass\n      </button>\n    </div>\n  );\n};\n\nconst Turn = () => {\n  return <div style={styles.turn}>\n    <Message />\n    <Choice />\n  </div>;\n};\n\nlet styles = {\n  turn: {\n    flex: 1,\n    flexWrap: 'wrap',\n  },\n  message: {\n    flex: 6,\n    paddingLeft: '20vw',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  choice: {\n    flex: 2,\n    justifyContent: 'space-evenly',\n  },\n  text: {\n    fontSize: '2vh',\n    fontWeight: 600,\n    color: 'brown',\n\n  },\n  buttons: {\n    width: 100,\n    height: 35,\n    borderRadius: 8,\n    margin: 3,\n  },\n};\n\nexport default Turn;\n","import React, { useState } from 'react';\nimport CustomizeCard from '../CustomizeCard';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  addSelectedCard,\n  removeCardSelected,\n} from '../../store/reducers/playerReducer';\n\nconst Cards = () => {\n  let dispatch = useDispatch()\n  let cards = useSelector((state) => state.player.hand)\n  let cardsSelected = useSelector((state) => state.player.cardsSelected);\n\n  const selectCard = (card) => {\n    if (!cardsSelected.includes(card)) {\n      card.isSelected = true;\n      dispatch(addSelectedCard(card))\n    } else {\n      card.isSelected = false;\n      dispatch(removeCardSelected(card))\n    }\n  }\n\n  return (\n    <div style={styles.cards}>\n      <ul style={{flex:1}}>\n      {cards.map((card) => {\n        return (\n          <li\n            style={{\n              ...styles.item,\n              marginTop: card.isSelected ? -10 : 0,\n              marginBottom: card.isSelected? 10 : 0,\n    \n            }}\n            key={card.id}\n            onClick={() => selectCard(card)}\n          >\n            <CustomizeCard\n              cardSize={styles.card}\n              cardInner={styles.cardInner}\n              card={card}\n            />\n          </li>\n        );\n      })}\n      </ul>\n    </div>\n  );\n};\n\nconst Hand = () => {\n  return (\n    <div style={styles.hand}>\n      <Cards />\n    </div>\n  );\n};\n\nlet styles = {\n  hand: {\n    flex: 5,\n    flexDirection: 'row',\n    background: 'rgba(38, 63, 38, 0.7)',\n    overflow: 'hidden',\n  },\n  cards: {\n    flex: 1,\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    marginLeft: '1.5em',\n    marginRight: '1em',\n    paddingTop: '1em'\n  },\n  item: {\n    background: 'rgba(0, 0, 0, 0)',\n    flex: 1\n  },\n  card: {\n    height: '10vw',\n    width: '7.5vw',\n    minWidth: 68,\n    minHeight: 90,\n  },\n};\nexport default Hand;\n","import React from 'react'\nimport {Turn, Hand} from \"./PlayerComponents\"\n\nconst Player = () => {\n\n  return (\n    <div style={styles.player}>\n      <Turn />\n      <Hand />\n    </div>\n  )\n}\n\nlet styles = {\n  player: {\n    flex: 10,\n    flexDirection: 'column',\n  },\n\n};\n\nexport default Player","import './App.css';\nimport React, {useState} from 'react';\nimport { Board, Player, Footer } from './Components'\n\nfunction App() {\n\n  // Init State\n  const [isFirstGame, toggleIsFirstGame] = useState(false)\n  const [isPlaying, toggleIsPlaying] = useState(false)\n  const [playerStats, updatePlayerStats] = useState({\n    cards: [],\n    totalCards: 0\n  })\n  const [computerStats, updateComputerStats] = useState({\n    cards: [],\n    totalCards: 0,\n  });\n  const [cardsLastPlayed, newCardsPlayed] = useState([])\n\n  return (\n    <div className=\"App\" style={styles.app} >\n      <Board />\n      <Player />\n      {/* <Footer /> */}\n    </div>\n  );\n}\n\nlet styles = {\n  app: {\n    flex: 1,\n    flexDirection: \"column\",\n    height: \"100vh\",\n    width: \"100vw\",\n\n  },\n  \n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n   </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}